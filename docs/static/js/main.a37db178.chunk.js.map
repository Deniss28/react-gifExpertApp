{"version":3,"sources":["components/AddCategory.js","helpers/getGif.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGift.js","GiftExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifts","category","a","url","encodeURI","fetch","res","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGift","GiftExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAkB9C,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACvCN,EAAc,MAOlB,SACG,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAnBe,SAAEP,GACxBF,EAAcE,EAAEQ,OAAOF,a,+BCPdG,EAAQ,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEdC,EAFc,iDAEmCC,UAAWH,GAF9C,+DAGFI,MAAOF,GAHL,cAGdG,EAHc,gBAICA,EAAIC,OAJL,uBAIbC,EAJa,EAIbA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVtB,kBAcbM,GAda,4CAAH,sDCAZO,EAAc,SAAC,GAAmB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAGjC,OACI,sBAAKc,UAAY,2CAAjB,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCFJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECGb,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAuBxC,OAhBAC,qBAAU,WAENxB,EAAUC,GACDwB,MAAM,SAAAC,GAEHC,YAAW,WACPJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,YAM9B,CAAEpB,IAEEqB,EDtBwBM,CAAc3B,GAAjCa,EAJyB,EAI9BN,KAAaa,EAJiB,EAIjBA,QAOpB,OACI,qCACC,oBAAIJ,UAAW,2CAAf,SAA4DhB,IAC1DoB,GAAW,mBAAGJ,UAAU,wCAAb,qBACb,qBAAKA,UAAU,YAAf,SAEG,6BAEOH,EAAOJ,KAAK,SAAAC,GAAG,OACd,cAAC,EAAD,eAESA,GADEA,EAAIC,eEapBiB,EApCO,WAAM,MAIc1C,mBAAS,CAAC,SAJxB,mBAIhB2C,EAJgB,KAIH5C,EAJG,KAexB,OACI,qCACK,+CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEO4C,EAAWpB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CACAA,SAAWA,GACLA,Y,MCvB9B8B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.a37db178.chunk.js","sourcesContent":["/* eslint-disable no-unreachable */\r\nimport React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( {setCategories} ) => {\r\n    //va a ser la ultimo que la persona escribió\r\n    const [inputValue, setInputValue] = useState(''); //undefined\r\n\r\n    const handleInputChange = ( e ) =>{\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        if( inputValue.trim().length > 2){\r\n            setCategories(cats => [ inputValue, ...cats ]);\r\n            setInputValue('');\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n           <input\r\n               type=\"text\"\r\n               value={inputValue}\r\n               onChange={handleInputChange}\r\n           />  \r\n        </form>\r\n    );\r\n\r\n    AddCategory.propTypes = {\r\n        setCategories: PropTypes.func.isRequired,\r\n    }\r\n}\r\n","\r\n\r\n    export const getGifts = async(category) => {\r\n        //para que no tenga espacios va encode URi, en la busqueda\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category )}&limit=10&api_key=TltIzHthLndTvFMyQVJrlYFt4ZYlkCRV`;\r\n        const res = await fetch( url );\r\n        const {data} = await res.json();\r\n\r\n        const gifs = data.map( img => {\r\n            return{\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n        })\r\n\r\n        return gifs; \r\n    }","import React from 'react';\r\n\r\nexport const GifGridItem = ({ title, url}) => {\r\n\r\n   \r\n    return (\r\n        <div className = \"card animate__animated animate__backInUp\"> \r\n            <img src={ url } alt={ title } />\r\n            <p>{ title }</p>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React from 'react';\r\nimport { useFetchGift } from '../hooks/useFetchGift';\r\n//import { getGifts } from '../helpers/getGif';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n    //use Effect ejecutar codigo de manera condicional\r\n    //se ejecuta la peticion cuando el objeto es renderizado\r\n    //por primera vez\r\n    const {data:images, loading} = useFetchGift( category );\r\n    \r\n    \r\n    //arreglo de dependencias\r\n\r\n\r\n    \r\n    return (\r\n        <>\r\n         <h3 className= \"card animate__animated animate__backInUp\">{ category }</h3>\r\n         { loading && <p className=\"card animate__animated animate__flash\">loading</p> }\r\n         <div className=\"card-grid\">\r\n            \r\n            <ol>\r\n                {\r\n                   images.map( img => (\r\n                    <GifGridItem \r\n                         key={ img.id }\r\n                         {...img } //propiedad independiente \r\n                    />                    \r\n                   ))\r\n                }\r\n               \r\n            </ol>\r\n            </div>\r\n        </>\r\n        \r\n    )\r\n}\r\n","\r\n//los hooks nno son mas que funciones \r\n//puedn tener un estado, y le dicen a los componentes cuando\r\n//renderizarse porque algo cambio\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport  { getGifts } from  '../helpers/getGif';\r\n\r\n\r\nexport const useFetchGift = ( category ) => {\r\n    \r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n    \r\n    useEffect(() =>{\r\n        \r\n        getGifts( category )\r\n                .then( imgs => {\r\n\r\n                    setTimeout(() =>{\r\n                        setstate({\r\n                            data: imgs,\r\n                            loading: false\r\n                        }); \r\n                    }); \r\n                    \r\n                })\r\n\r\n    }, [ category ]);\r\n\r\n    return state; //{dta:[], loading:true}\r\n}\r\n    ","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GiftExpertApp = () => {\r\n    \r\n    //const categories = ['Dragon Ball', 'One Punch Man', 'Baki'];\r\n\r\n     const [categories , setCategories] = useState(['Love']);\r\n     //spread matiene las categorias y añade un nuevo elemento\r\n     //si cambias de posicion al spread agregas un nuevo elemnto en la \r\n     //posiscion 1\r\n   /*  const handleAdd = () =>{\r\n         //setCategories(['Clannad', ...categories]);\r\n         //callback que regresa un nuevo arreglo con todas la categorias\r\n         //regresa un nuevo estado\r\n         setCategories(cats => [ ...cats, 'Clannad' ] );\r\n     }*/ \r\n\r\n    return (\r\n        <>\r\n             <h2>GiftExpertApp</h2>\r\n             <AddCategory setCategories={setCategories}/>\r\n             <hr/>\r\n            \r\n             <ol>\r\n                 {\r\n                    categories.map( category => (\r\n                        <GifGrid \r\n                        category={ category }\r\n                        key={ category } \r\n                        /> //muestra el arreglo\r\n                    ))\r\n                 }\r\n             </ol>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default GiftExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GiftExpertApp from './GiftExpertApp';\nimport './index.css';\n\n\n\nReactDOM.render(\n\n    <GiftExpertApp/>,\n  \n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}